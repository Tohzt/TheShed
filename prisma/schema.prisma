generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
}

model device {
  id          String   @id @default(cuid())
  name        String   @unique(map: "Device_name_key")
  type        String
  location    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readings    devicereading[]
}

model devicereading {
  id          String   @id @default(cuid())
  deviceId    String
  temperature Float?
  humidity    Float?
  pressure    Float?
  motion      Boolean?
  light       Float?
  metadata    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  device      device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model roundtable {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
